shared:
  - &failure-alert
    put: slack-alert
    params:
      silent: true
      icon_emoji: ":interrobang:"
      text: |
        *The <$ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME - $BUILD_JOB_NAME> job failed!*
  - &success-alert
    put: slack-alert
    params:
      silent: true
      icon_emoji: ":rocket:"
      text: |
        *The <$ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME - $BUILD_JOB_NAME> job passed!*

jobs:
  - name: auto-bump-terraform
    on_success: *success-alert
    on_failure: *failure-alert
    plan:
      - in_parallel:
        - get: terraform-github-release
          trigger: true
        - get: resource-src
      - task: bump-terraform-cli
        file: resource-src/ci/tasks/bump-terraform-cli.yml
      - task: git-commit
        file: resource-src/ci/tasks/git-commit.yml
        input_mapping: {input-src: updated-resource-src}
        output_mapping: {output-src: committed-resource-src}
        params:
          GIT_ADD_ARGS: ./config/terraform-version
          GIT_COMMIT_MSG: ":airplane: Auto-commit: Bumping Terraform CLI version"
          GIT_COMMIT_USERNAME: friendly-ci
          GIT_COMMIT_EMAIL: {{git_commit_email}}
          GIT_SUCCEED_ON_NO_CHANGES: true
      - put: resource-src
        params:
          repository: committed-resource-src/
          rebase: true

  - name: push-dev-image
    serial_groups: [track1, track2, track3, track4, track5]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
      - task: build-artifacts
        file: resource-src/ci/tasks/build-dev-artifacts.yml
      - put: terraform-dev-image
        params:
          build: build-artifacts/
          buildx_platforms: "linux/amd64,linux/arm64"

  - name: test-unit
    serial_groups: [track1, track2, track3, track4, track5]
    on_failure: *failure-alert
    plan:
      - in_parallel:
        - get: resource-src
          trigger: true
          passed: [push-dev-image]
        - get: terraform-dev-image
          passed: [push-dev-image]
      - task: test-unit
        image: terraform-dev-image
        file: resource-src/ci/tasks/test-unit.yml
        params:
          AWS_ACCESS_KEY:           {{ec2_access_key}}
          AWS_SECRET_KEY:           {{ec2_secret_key}}
          AWS_BUCKET:               {{storage_bucket}}
          AWS_BUCKET_SUBFOLDER:     terraform-test-unit
          GCS_BUCKET:               {{gcs_bucket}}
          GCS_ENDPOINT:             {{gcs_endpoint}}
          GCS_ACCESS_KEY:           {{gcs_access_key}}
          GCS_SECRET_KEY:           {{gcs_secret_key}}
          GCS_CREDENTIALS_JSON:     {{gcs_credentials_json}}
          S3_KMS_KEY_ID:            {{s3_kms_key_id}}
          GITHUB_PRIVATE_KEY:       {{git_private_key}}

  - name: push-test-image
    serial_groups: [track1, track2, track3, track4, track5]
    on_failure: *failure-alert
    plan:
      - in_parallel:
        - get: resource-src
          trigger: true
          passed: [test-unit]
        - get: terraform-dev-image
          passed: [test-unit]
      - task: build-artifacts
        image: terraform-dev-image
        file: resource-src/ci/tasks/build-prod-artifacts.yml
      - put: terraform-test-image
        params:
          build: build-artifacts/
          buildx_platforms: "linux/amd64,linux/arm64"

  - name: wait-for-test-image
    serial_groups: [track1, track2, track3, track4, track5]
    on_failure: *failure-alert
    plan:
      - in_parallel:
        - get: resource-src
          trigger: true
          passed: [push-test-image]
        - get: terraform-test-image
          passed: [push-test-image]
      - task: wait-for-resource-type-to-update
        image: terraform-test-image
        config:
          platform: linux
          run:
            path: sleep
            args:
              - "300" # concourse updates resource images every couple minutes

  - name: create-env-with-s3-backend
    serial_groups: [track1]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [wait-for-test-image]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: s3-backend-env
          vars:
            object_key: ci-pipeline/track1
            object_content: "terraform is neat!"
      - &show-outputs
        task: show-outputs
        config:
          platform: linux
          image_resource: &test-image
            type: docker-image
            source:
              repository: ljfranklin/terraform-resource
              tag: test
          inputs:
            - name: terraform
          run:
            path: /bin/sh
            args:
              - -c
              - |
                  echo "name: $(cat terraform/name)"
                  echo "metadata: $(cat terraform/metadata)"

  - name: update-env-with-s3-backend
    serial_groups: [track1]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [create-env-with-s3-backend]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: s3-backend-env
          vars:
            object_key: ci-pipeline/track1
            object_content: "terraform is still neat!"
      - *show-outputs

  - name: destroy-env-with-s3-backend
    serial_groups: [track1]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [update-env-with-s3-backend]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: s3-backend-env
          action: destroy
          vars:
            object_key: ci-pipeline/track1
            object_content: "terraform is still neat!"
        get_params:
          action: destroy

  - name: create-env-with-gcs-backend
    serial_groups: [track2]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [wait-for-test-image]
      - put: terraform
        resource: terraform-gcs-backend
        params:
          env_name: gcs-backend-env
          vars:
            object_key: ci-pipeline/track2
            object_content: "terraform is neat!"
      - *show-outputs

  - name: destroy-env-with-gcs-backend
    serial_groups: [track2]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [create-env-with-gcs-backend]
      - put: terraform
        resource: terraform-gcs-backend
        params:
          env_name: gcs-backend-env
          action: destroy
          vars:
            object_key: ci-pipeline/track2
            object_content: "terraform is neat!"
        get_params:
          action: destroy

  - name: create-env-and-lock
    serial_groups: [track3]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [wait-for-test-image]
      - put: terraform
        resource: terraform-s3-backend
        params:
          generate_random_name: true
          delete_on_failure: true
          vars:
            object_key: ci-pipeline/track3
            object_content: "terraform is neat!"
      - put: locks
        params:
          add: terraform/

  - name: lock-env
    serial_groups: [track3]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [create-env-and-lock]
      - put: locks
        params:
          acquire: true
      - task: show-lock
        config:
          platform: linux
          image_resource: *test-image
          inputs:
            - name: locks
          run:
            path: /bin/sh
            args:
              - -c
              - |
                  echo "name: $(cat locks/name)"
                  echo "metadata: $(cat locks/metadata)"

  - name: destroy-env-and-lock
    serial_groups: [track3]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [lock-env]
      - get: locks
        passed: [lock-env]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name_file: locks/name
          action: destroy
          vars:
            object_key: ci-pipeline/track3
            object_content: "terraform is neat!"
        get_params:
          action: destroy
      - put: locks
        params:
          remove: locks/

  - name: create-env-with-legacy-storage
    serial_groups: [track4]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [wait-for-test-image]
      - put: terraform
        resource: terraform-legacy-storage
        params:
          env_name: migrated-env
          vars:
            object_key: ci-pipeline/track4
            object_content: "terraform is neat!"
      - *show-outputs

  - name: migrate-env
    serial_groups: [track4]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [create-env-with-legacy-storage]
      - put: terraform
        resource: terraform-migrated-backend
        params:
          env_name: migrated-env
          vars:
            object_key: ci-pipeline/track4
            object_content: "terraform is still neat!"
      - *show-outputs

  - name: destroy-migrated-env
    serial_groups: [track4]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [migrate-env]
      - put: terraform
        resource: terraform-migrated-backend
        params:
          env_name: migrated-env
          action: destroy
          vars:
            object_key: ci-pipeline/track4
            object_content: "terraform is still neat!"
        get_params:
          action: destroy

  - name: create-plan
    serial_groups: [track5]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [wait-for-test-image]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: plan-env
          plan_only: true
          vars:
            object_key: ci-pipeline/track5
            object_content: "terraform is neat!"

  - name: apply-plan
    serial_groups: [track5]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [create-plan]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: plan-env
          plan_run: true
      - *show-outputs

  - name: destroy-plan-env
    serial_groups: [track5]
    on_failure: *failure-alert
    plan:
      - get: resource-src
        trigger: true
        passed: [apply-plan]
      - put: terraform
        resource: terraform-s3-backend
        params:
          env_name: plan-env
          action: destroy
          vars:
            object_key: ci-pipeline/track5
            object_content: "terraform is still neat!"
        get_params:
          action: destroy

  - name: push-prod-image
    on_failure: *failure-alert
    plan:
      - get: resource-src
        passed: [destroy-env-with-s3-backend, destroy-env-with-gcs-backend, destroy-env-and-lock, destroy-migrated-env, destroy-plan-env]
        trigger: true
      - task: write-docker-metadata-files
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ljfranklin/terraform-resource
              tag: dev
          inputs:
            - name: resource-src
          outputs:
            - name: docker-metadata
          run:
            path: /bin/bash
            args:
              - "-c"
              - |
                  TF_VERSION="$(cat resource-src/config/terraform-version)"
                  SHA="$(cat resource-src/.git/short_ref)"
                  echo "${TF_VERSION} ${TF_VERSION}-${SHA}" > docker-metadata/tags
                  echo "{\"terraform_version\": \"${TF_VERSION}\"}" > docker-metadata/labels
      - task: build-artifacts
        file: resource-src/ci/tasks/build-prod-artifacts.yml
      - put: terraform-prod-image
        params:
          build: build-artifacts/
          tag_as_latest: true
          additional_tags: docker-metadata/tags
          labels_file: docker-metadata/labels
          buildx_platforms: "linux/amd64,linux/arm64"

resource_types:
- name: docker-buildx
  type: registry-image
  privileged: true
  source:
    repository: ljfranklin/docker-buildx-resource
    tag: latest
- name: terraform-test
  type: registry-image
  source:
    # use tag `latest` for stable release
    repository: ljfranklin/terraform-resource
    tag: test
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: resource-src
  type: git
  source:
    uri: git@github.com:ljfranklin/terraform-resource.git
    branch: master
    private_key: {{git_private_key}}
- name: terraform-github-release
  type: github-release
  source:
    user: hashicorp
    repository: terraform
    access_token: {{github_access_token}}
- name: terraform-dev-image
  type: docker-buildx
  source:
    repository: ljfranklin/terraform-resource
    tag: dev
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: terraform-test-image
  type: docker-buildx
  source:
    repository: ljfranklin/terraform-resource
    tag: test
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: terraform-prod-image
  type: docker-buildx
  source:
    repository: ljfranklin/terraform-resource
    tag: latest
    email: {{docker_email}}
    username: {{docker_username}}
    password: {{docker_password}}
- name: locks
  type: pool
  source:
    uri: git@github.com:ljfranklin/terraform-resource.git
    branch: ci-pool-test
    pool: aws-ci-pool
    private_key: {{git_private_key}}
- name: terraform-s3-backend
  type: terraform-test
  source:
    backend_type: s3
    backend_config:
      access_key:           {{storage_access_key}}
      secret_key:           {{storage_secret_key}}
      bucket:               {{storage_bucket}}
      region:               {{storage_region}}
      key:                  terraform.tfstate
      workspace_key_prefix: terraform-backend-ci
    terraform_source: resource-src/fixtures/aws
    vars:
      access_key:  {{ec2_access_key}}
      secret_key:  {{ec2_secret_key}}
      bucket:      {{storage_bucket}}
- name: terraform-gcs-backend
  type: terraform-test
  source:
    backend_type: gcs
    backend_config:
      bucket: {{gcs_bucket}}
      credentials: {{gcs_credentials_json}}
      prefix: terraform-backend-ci
    terraform_source: resource-src/fixtures/aws
    vars:
      access_key:  {{ec2_access_key}}
      secret_key:  {{ec2_secret_key}}
      bucket:      {{storage_bucket}}
- name: terraform-migrated-backend
  type: terraform-test
  source:
    backend_type: s3
    backend_config:
      access_key:           {{storage_access_key}}
      secret_key:           {{storage_secret_key}}
      bucket:               {{storage_bucket}}
      region:               {{storage_region}}
      key:                  terraform.tfstate
      workspace_key_prefix: terraform-migrated-backend-ci
    migrated_from_storage:
      access_key_id:     {{storage_access_key}}
      secret_access_key: {{storage_secret_key}}
      bucket:            {{storage_bucket}}
      bucket_path:       terraform-migrated-storage-ci
    terraform_source: resource-src/fixtures/aws
    vars:
      access_key:  {{ec2_access_key}}
      secret_key:  {{ec2_secret_key}}
      bucket:      {{storage_bucket}}
- name: terraform-legacy-storage
  type: terraform-test
  source:
    storage:
      access_key_id:     {{storage_access_key}}
      secret_access_key: {{storage_secret_key}}
      bucket:            {{storage_bucket}}
      bucket_path:       terraform-migrated-storage-ci
    terraform_source: resource-src/fixtures/aws
    vars:
      access_key:  {{ec2_access_key}}
      secret_key:  {{ec2_secret_key}}
      bucket:      {{storage_bucket}}
- name: slack-alert
  type: slack-notification
  source:
    url: {{slack_url}}
